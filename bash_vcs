scm_info() {
#
# Call the adapted version control command to retrieve the
# information and returns a corresponding color coded string
#
	ROOT=`bzr root 2> /dev/null`
	type='bzr'
	if [ ${ROOT} ]; then 
		type='bzr'
		[ -d "${ROOT}/.bzr" ] && [ `which bzr` ] && type='bzr'
		[ -d "${ROOT}/.git" ] && [ `which git` ] && type='git'
		[ -d "${ROOT}/.svn" ] && [ `which svn` ] && type='svn'
		[ -d "${ROOT}/CVS"  ] && [ `which svn` ] && type='cvs'
		[ -d "${ROOT}/.hg"  ] && [ `which hg`  ] && type='hg'
	fi

	if [ ${type} = 'bzr' ]; then 
		bzr_info=`bzr revno --tree 2> /dev/null`
		if [ ${bzr_info} ]; then
			if [ "$(bzr st -S)"  ]; then
				bzr_color='\033[1;31m'
			else
				if [ "$(bzr info -v | grep -i 'out of date')"  ]; then
					bzr_color='\033[1;33m'
				else
					bzr_color='\033[1;32m'
				fi
			fi
			echo -en "${bzr_color}[ bzr:${bzr_info} ] \033[0m "
		fi
	elif [ ${type} = 'git' ]; then 
		git_info=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`

		if [ ${git_info} ]; then
			revno=`git rev-list HEAD | wc -l`
			if [ "$(git status -s)"  ]; then
				git_color='\033[1;31m'
			else
				git_color='\033[1;36m'
			fi

		git_remote_info=`git log HEAD..origin/${git_info} --pretty=format:'%Cred%h%Creset %ad | %Cgreen%s%d%Creset [%an]' --date=short 2> /dev/null`

		git_local_info=`git log origin/${git_info}..HEAD --pretty=format:'%Cred%h%Creset %ad | %Cgreen%s%d%Creset [%an]' --date=short 2> /dev/null`

			if [ "${git_remote_info}" ]; then
				ncomits=`echo "${git_remote_info}" | wc -l`
				echo -e "\n \033[1;33mOutdated branch.\033[0m  ${ncomits} commits behind."
				echo "${git_remote_info}"
				echo ''
			fi

			if [ "${git_local_info}" ]; then
				ncomits=`echo "${git_remote_info}" | wc -l`
				echo -e "\n \033[1;33mAdvanced branch.\033[0m  ${ncomits} commits to push."
				echo "${git_local_info}"
				echo ''
			fi
			echo -en "${git_color}[ git:(${git_info}):${revno} ]\033[0m "
		fi
	elif [ ${type} = 'hg' ]; then 
		hg_info=`hg branch 2> /dev/null`
		if [ ${hg_info} ]; then
			if [ "$(hg st)"  ]; then
				hg_color='\033[1;31m'
			else
				hg_color='\033[1;36m'
			fi
			echo -en "${hg_color}hg:${hg_info}\033[0m "
		fi
	elif [ ${type} = 'svn' ]; then 
		svn_info=`svn info | grep ^Revision | awk '{print $2}'`
		if [ ${svn_info} ]; then
			if [ "$(svn st --ignore-externals -q)"  ]; then
				svn_color='\033[1;31m'
			else
				svn_color='\033[1;36m'
			fi
			echo -en "${svn_color}svn:${svn_info}\033[0m "
		fi
	elif [ ${type} = 'cvs' ]; then 
		if [ "$(svn st)"  ]; then
			cvs_color='\033[1;31m'
		else
			cvs_color='\033[1;36m'
		fi
		echo -en "${cvs_color}cvs\033[0m "
		#echo -en "\033[1;36mcvs\033[0m "
	fi
}

root_info() {
	echo -en `bzr root 2> /dev/null`
}

PS1='\[$(scm_info)\]$(root_info)\n'"${PS1}"

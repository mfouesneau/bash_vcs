#!/bin/bash
#
# Versioning system control in your bash prompt
# =============================================
# 
# This script add a tag to your prompt informing you when you enter a vcs
# repository folder.
# 
# It works with git svn bzr and hg backends.
# 
# Installation
# ------------
# 
# Copy the `bash_vcs` into your home directory `~/.bash_vcs`
# and add the following snippet to your `.bashrc`
# 
# ```shell
# # Include git svn bzr tree detection
# if [ -f ~/.bash_vcs ]; then
#     . ~/.bash_vcs
# fi
# ```

# configuration
# -------------
# Find default versioning commands install in the system
# And define the default behavior (mainly to find root of repositories)
BASH_VCS_BZR=`which bzr 2>/dev/null`
BASH_VCS_GIT=`which git 2>/dev/null`
BASH_VCS_SVN=`which svn 2>/dev/null`
BASH_VCS_HG=`which hg 2>/dev/null`

function bash_vcs_set_default_mode() {
# set default priority to the VCS commands if multiple are available and returns
# the highest priority command found in the system
#
# Returns the ${BASH_VCS_DEFAULT_MODE}
	BASH_VCS_DEFAULT_MODE=''
	if [ -n BASH_VCS_BZR ]; then
		BASH_VCS_DEFAULT_MODE='bzr'
	elif [ -n BASH_VCS_GIT ]; then
		BASH_VCS_DEFAULT_MODE='git'
	elif [ -n BASH_VCS_SVN ]; then
		BASH_VCS_DEFAULT_MODE='svn'
	elif [ -n HG ]; then
		BASH_VCS_DEFAULT_MODE='hg'
	else
		BASH_VCS_DEFAULT_MODE=''
	fi
	echo -en "$BASH_VCS_DEFAULT_MODE"
}

BASH_VCS_DEFAULT_MODE=$(bash_vcs_set_default_mode)


function bash_vcs_get_root_info() {
# find ROOT directory of the repository by using the `BASH_VCS_DEFAULT_MODE`
# command. 
# Robustness was added to this function by going down the command priority list
# until no error is returned (e.g. sometimes with new version bzr cannot nicely
# play with git)
#
# Returns the ${BASH_VCS_DEFAULT_MODE} ${ROOTDIR}

	#find ROOT directory
	ROOT="${PWD}"
	ERROR=""

	
	case ${BASH_VCS_DEFAULT_MODE} in 

		bzr)
			ROOT=`bzr root 2> /dev/null` || ERROR="1"
			;;
		git)
			ROOT=`git rev-parse --show-toplevel 2> /dev/null` || ERROR="1"
			;;
		hg)
			ROOT=`hg root 2> /dev/null` || ERROR="1"
			;;
	esac

	if [ $ERROR ]; then

		if [ $ERROR ]; then 
			ROOT=`bzr root 2> /dev/null`
			if [ -z $ROOT ]; then ERROR="1"; else ERROR="" && BASH_VCS_DEFAULT_MODE='bzr'; fi
		fi

		if [ $ERROR ]; then
			ROOT=`git rev-parse --show-toplevel 2> /dev/null`
			if [ -z $ROOT ]; then ERROR="1"; else ERROR="" && BASH_VCS_DEFAULT_MODE='git'; fi
		fi

		if [ $ERROR ]; then
			ROOT=`hg root 2> /dev/null`
			if [ -z $ROOT ]; then ERROR="1"; else ERROR="" && BASH_VCS_DEFAULT_MODE='hg'; fi
		fi

		if [ $ERROR ]; then
			ROOT="${PWD}"
			BASH_VCS_DEFAULT_MODE=''
		fi
	fi

	echo -en "$BASH_VCS_DEFAULT_MODE ${ROOT}"
}

# Individual VCS command info parsing tools
# -----------------------------------------

function bash_vcs_get_currenttype(){
# returns the current type mode to use that is the most appropriate with the
# current directory

	# get ROOT and type robustly
	IFS=' ' read -ra ret <<< $(bash_vcs_get_root_info)
	#for k in ${ret[@]}; do echo $k;done
	type=${ret[0]}
	ROOT=${ret[1]}

	# only update if at least one VCS command exists
	if [ ${type} ]; then 
		[ -d "${ROOT}/.bzr" ] && [ -n BASH_VCS_BZR ] && type='bzr'
		[ -d "${ROOT}/.git" ] && [ -n BASH_VCS_GIT ] && type='git'
		[ -d "${ROOT}/.svn" ] && [ -n BASH_VCS_SVN ] && type='svn'
		[ -d "${ROOT}/CVS"  ] && [ -n BASH_VCS_SVN ] && type='cvs'
		[ -d "${ROOT}/.hg"  ] && [ -n BASH_VCS_HG  ] && type='hg'
	fi

	echo -en ${type}
}


function bzr_info(){
#returns info string from bzr
	info=`bzr revno --tree 2> /dev/null`
	if [ ${info} ]; then
		if [ "$(bzr st -S)"  ]; then
			bzr_color='\033[1;31m'
		else
			if [ "$(bzr info -v | grep -i 'out of date')"  ]; then
				bzr_color='\033[1;33m'
			else
				bzr_color='\033[1;32m'
			fi
		fi
		info="${bzr_color}[ bzr:${info} ] \033[0m "
	fi
	echo -en ${info}
}

function git_info(){
#returns info string from git
	info=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`

	if [ ${info} ]; then
		revno=`git rev-list HEAD | wc -l`
		if [ "$(git status -s)"  ]; then
			git_color='\033[1;31m'
		else
			git_color='\033[1;36m'
		fi

		# supplementary information
		git_remote_info=`git log HEAD..origin/${info} --pretty=format:'%Cred%h%Creset %ad | %Cgreen%s%d%Creset [%an]' --date=short 2> /dev/null`

		git_local_info=`git log origin/${info}..HEAD --pretty=format:'%Cred%h%Creset %ad | %Cgreen%s%d%Creset [%an]' --date=short 2> /dev/null`

		if [ "${git_remote_info}" ]; then
			ncomits=`echo "${git_remote_info}" | wc -l`
			echo -e "\n \033[1;33mOutdated branch.\033[0m  ${ncomits} commits behind."
			echo "${git_remote_info}"
			echo ''
		fi

		if [ "${git_local_info}" ]; then
			ncomits=`echo "${git_remote_info}" | wc -l`
			echo -e "\n \033[1;33mAdvanced branch.\033[0m  ${ncomits} commits to push."
			echo "${git_local_info}"
			echo ''
		fi

		info="${git_color}[ git:(${info}):${revno} ]\033[0m "
	fi
	echo -en ${info}
}

function svn_info(){

	info=`svn info | grep ^Revision | awk '{print $2}'`
	if [ ${info} ]; then
		if [ "$(svn st --ignore-externals -q)"  ]; then
			svn_color='\033[1;31m'
		else
			svn_color='\033[1;36m'
		fi
		info="${svn_color}svn:${info}\033[0m "
	fi
	echo -en ${info}
}

function csv_info(){

	info=`svn info | grep ^Revision | awk '{print $2}'`
	if [ ${info} ]; then
		if [ "$(svn st)"  ]; then
			cvs_color='\033[1;31m'
		else
			cvs_color='\033[1;36m'
		fi
		info="${cvs_color}cvs\033[0m "
	fi
	echo -en ${info}
}


# Shell tools and Bash prompt integration
# ---------------------------------------

scm_info() {
#
# Call the adapted version control command to retrieve the
# information and returns a corresponding color coded string
#
# returns ${info}
	case $(bash_vcs_get_currenttype) in 

		bzr)
			echo -en $(bzr_info)
			;;
		git)
			echo -en $(git_info)
			;;
		svn)
			echo -en $(svn_info)
			;;
		csv)
			echo -en $(csv_info)	
			;;
		*)
			echo -en ''
			;;
	esac
}

root_info() { 
# get ROOT and type robustly (used in the prompt)
#
# returns ${ROOT} 
	IFS=' ' read -ra ret <<< $(bash_vcs_get_root_info)
	#for k in ${ret[@]}; do echo $k;done
	if [ -z ${ret[1]} ]; then
		echo -en ""
	else
		echo -en " ${ret[1]}\n"
	fi
}

#integrate: strong quotes to make the evaluation of the functions at every
# call
PS1='$(scm_info)$(root_info)\n'"${PS1}"
